/* 
 * BJ API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LiveBlackjackGame
    /// </summary>
    [DataContract]
        public partial class LiveBlackjackGame :  IEquatable<LiveBlackjackGame>, IValidatableObject
    {
        public LiveBlackjackGame()
        {

        }
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveBlackjackGame" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="awaitingPlayerActionSince">awaitingPlayerActionSince.</param>
        /// <param name="awaitingNextRoundSince">awaitingNextRoundSince.</param>
        /// <param name="dealerHand">dealerHand.</param>
        public LiveBlackjackGame(string title = default(string), DateTime? awaitingPlayerActionSince = default(DateTime?), DateTime? awaitingNextRoundSince = default(DateTime?), BlackjackHand dealerHand = default(BlackjackHand))
        {
            this.Title = title;
            this.AwaitingPlayerActionSince = awaitingPlayerActionSince;
            this.AwaitingNextRoundSince = awaitingNextRoundSince;
            this.DealerHand = dealerHand;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public String Name { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets TurnLengthInSeconds
        /// </summary>
        [DataMember(Name="turnLengthInSeconds", EmitDefaultValue=false)]
        public int? TurnLengthInSeconds { get; private set; }

        /// <summary>
        /// Gets or Sets BettingPeriodInSeconds
        /// </summary>
        [DataMember(Name="bettingPeriodInSeconds", EmitDefaultValue=false)]
        public int? BettingPeriodInSeconds { get; private set; }

        /// <summary>
        /// Gets or Sets AwaitingPlayerActionSince
        /// </summary>
        [DataMember(Name="awaitingPlayerActionSince", EmitDefaultValue=false)]
        public DateTime? AwaitingPlayerActionSince { get; set; }

        /// <summary>
        /// Gets or Sets AwaitingNextRoundSince
        /// </summary>
        [DataMember(Name="awaitingNextRoundSince", EmitDefaultValue=false)]
        public DateTime? AwaitingNextRoundSince { get; set; }

        /// <summary>
        /// Gets or Sets PlayerActionIsExpired
        /// </summary>
        [DataMember(Name="playerActionIsExpired", EmitDefaultValue=false)]
        public bool? PlayerActionIsExpired { get; private set; }

        /// <summary>
        /// Gets or Sets DealerHand
        /// </summary>
        [DataMember(Name="dealerHand", EmitDefaultValue=false)]
        public BlackjackHand DealerHand { get; set; }

        /// <summary>
        /// Gets or Sets DealerHas21
        /// </summary>
        [DataMember(Name="dealerHas21", EmitDefaultValue=false)]
        public bool? DealerHas21 { get; private set; }

        /// <summary>
        /// Gets or Sets Players
        /// </summary>
        [DataMember(Name="players", EmitDefaultValue=false)]
        public List<BlackjackGamePlayer> Players { get; private set; }

        /// <summary>
        /// Gets or Sets MaxPlayers
        /// </summary>
        [DataMember(Name="maxPlayers", EmitDefaultValue=false)]
        public int? MaxPlayers { get; private set; }

        /// <summary>
        /// Gets or Sets MinWager
        /// </summary>
        [DataMember(Name="minWager", EmitDefaultValue=false)]
        public double? MinWager { get; private set; }

        /// <summary>
        /// Gets or Sets MaxWager
        /// </summary>
        [DataMember(Name="maxWager", EmitDefaultValue=false)]
        public double? MaxWager { get; private set; }

        /// <summary>
        /// Gets or Sets IsRoundInProgress
        /// </summary>
        [DataMember(Name="isRoundInProgress", EmitDefaultValue=false)]
        public bool? IsRoundInProgress { get; private set; }

        /// <summary>
        /// Gets or Sets PercentRemainingInDealerShoe
        /// </summary>
        [DataMember(Name="percentRemainingInDealerShoe", EmitDefaultValue=false)]
        public int? PercentRemainingInDealerShoe { get; private set; }

        /// <summary>
        /// Gets or Sets RoundInProgressSettlements
        /// </summary>
        [DataMember(Name="roundInProgressSettlements", EmitDefaultValue=false)]
        public List<BlackjackHandSettlement> RoundInProgressSettlements { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LiveBlackjackGame {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TurnLengthInSeconds: ").Append(TurnLengthInSeconds).Append("\n");
            sb.Append("  BettingPeriodInSeconds: ").Append(BettingPeriodInSeconds).Append("\n");
            sb.Append("  AwaitingPlayerActionSince: ").Append(AwaitingPlayerActionSince).Append("\n");
            sb.Append("  AwaitingNextRoundSince: ").Append(AwaitingNextRoundSince).Append("\n");
            sb.Append("  PlayerActionIsExpired: ").Append(PlayerActionIsExpired).Append("\n");
            sb.Append("  DealerHand: ").Append(DealerHand).Append("\n");
            sb.Append("  DealerHas21: ").Append(DealerHas21).Append("\n");
            sb.Append("  Players: ").Append(Players).Append("\n");
            sb.Append("  MaxPlayers: ").Append(MaxPlayers).Append("\n");
            sb.Append("  MinWager: ").Append(MinWager).Append("\n");
            sb.Append("  MaxWager: ").Append(MaxWager).Append("\n");
            sb.Append("  IsRoundInProgress: ").Append(IsRoundInProgress).Append("\n");
            sb.Append("  PercentRemainingInDealerShoe: ").Append(PercentRemainingInDealerShoe).Append("\n");
            sb.Append("  RoundInProgressSettlements: ").Append(RoundInProgressSettlements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LiveBlackjackGame);
        }

        /// <summary>
        /// Returns true if LiveBlackjackGame instances are equal
        /// </summary>
        /// <param name="input">Instance of LiveBlackjackGame to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiveBlackjackGame input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.TurnLengthInSeconds == input.TurnLengthInSeconds ||
                    (this.TurnLengthInSeconds != null &&
                    this.TurnLengthInSeconds.Equals(input.TurnLengthInSeconds))
                ) && 
                (
                    this.BettingPeriodInSeconds == input.BettingPeriodInSeconds ||
                    (this.BettingPeriodInSeconds != null &&
                    this.BettingPeriodInSeconds.Equals(input.BettingPeriodInSeconds))
                ) && 
                (
                    this.AwaitingPlayerActionSince == input.AwaitingPlayerActionSince ||
                    (this.AwaitingPlayerActionSince != null &&
                    this.AwaitingPlayerActionSince.Equals(input.AwaitingPlayerActionSince))
                ) && 
                (
                    this.AwaitingNextRoundSince == input.AwaitingNextRoundSince ||
                    (this.AwaitingNextRoundSince != null &&
                    this.AwaitingNextRoundSince.Equals(input.AwaitingNextRoundSince))
                ) && 
                (
                    this.PlayerActionIsExpired == input.PlayerActionIsExpired ||
                    (this.PlayerActionIsExpired != null &&
                    this.PlayerActionIsExpired.Equals(input.PlayerActionIsExpired))
                ) && 
                (
                    this.DealerHand == input.DealerHand ||
                    (this.DealerHand != null &&
                    this.DealerHand.Equals(input.DealerHand))
                ) && 
                (
                    this.DealerHas21 == input.DealerHas21 ||
                    (this.DealerHas21 != null &&
                    this.DealerHas21.Equals(input.DealerHas21))
                ) && 
                (
                    this.Players == input.Players ||
                    this.Players != null &&
                    input.Players != null &&
                    this.Players.SequenceEqual(input.Players)
                ) && 
                (
                    this.MaxPlayers == input.MaxPlayers ||
                    (this.MaxPlayers != null &&
                    this.MaxPlayers.Equals(input.MaxPlayers))
                ) && 
                (
                    this.MinWager == input.MinWager ||
                    (this.MinWager != null &&
                    this.MinWager.Equals(input.MinWager))
                ) && 
                (
                    this.MaxWager == input.MaxWager ||
                    (this.MaxWager != null &&
                    this.MaxWager.Equals(input.MaxWager))
                ) && 
                (
                    this.IsRoundInProgress == input.IsRoundInProgress ||
                    (this.IsRoundInProgress != null &&
                    this.IsRoundInProgress.Equals(input.IsRoundInProgress))
                ) && 
                (
                    this.PercentRemainingInDealerShoe == input.PercentRemainingInDealerShoe ||
                    (this.PercentRemainingInDealerShoe != null &&
                    this.PercentRemainingInDealerShoe.Equals(input.PercentRemainingInDealerShoe))
                ) && 
                (
                    this.RoundInProgressSettlements == input.RoundInProgressSettlements ||
                    this.RoundInProgressSettlements != null &&
                    input.RoundInProgressSettlements != null &&
                    this.RoundInProgressSettlements.SequenceEqual(input.RoundInProgressSettlements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.TurnLengthInSeconds != null)
                    hashCode = hashCode * 59 + this.TurnLengthInSeconds.GetHashCode();
                if (this.BettingPeriodInSeconds != null)
                    hashCode = hashCode * 59 + this.BettingPeriodInSeconds.GetHashCode();
                if (this.AwaitingPlayerActionSince != null)
                    hashCode = hashCode * 59 + this.AwaitingPlayerActionSince.GetHashCode();
                if (this.AwaitingNextRoundSince != null)
                    hashCode = hashCode * 59 + this.AwaitingNextRoundSince.GetHashCode();
                if (this.PlayerActionIsExpired != null)
                    hashCode = hashCode * 59 + this.PlayerActionIsExpired.GetHashCode();
                if (this.DealerHand != null)
                    hashCode = hashCode * 59 + this.DealerHand.GetHashCode();
                if (this.DealerHas21 != null)
                    hashCode = hashCode * 59 + this.DealerHas21.GetHashCode();
                if (this.Players != null)
                    hashCode = hashCode * 59 + this.Players.GetHashCode();
                if (this.MaxPlayers != null)
                    hashCode = hashCode * 59 + this.MaxPlayers.GetHashCode();
                if (this.MinWager != null)
                    hashCode = hashCode * 59 + this.MinWager.GetHashCode();
                if (this.MaxWager != null)
                    hashCode = hashCode * 59 + this.MaxWager.GetHashCode();
                if (this.IsRoundInProgress != null)
                    hashCode = hashCode * 59 + this.IsRoundInProgress.GetHashCode();
                if (this.PercentRemainingInDealerShoe != null)
                    hashCode = hashCode * 59 + this.PercentRemainingInDealerShoe.GetHashCode();
                if (this.RoundInProgressSettlements != null)
                    hashCode = hashCode * 59 + this.RoundInProgressSettlements.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
