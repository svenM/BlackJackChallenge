/* 
 * BJ API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BlackjackHand
    /// </summary>
    [DataContract]
        public partial class BlackjackHand :  IEquatable<BlackjackHand>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlackjackHand" /> class.
        /// </summary>
        /// <param name="scoreHighLow">scoreHighLow.</param>
        public BlackjackHand(Int32Int32ValueTuple scoreHighLow = default(Int32Int32ValueTuple))
        {
            this.ScoreHighLow = scoreHighLow;
        }
        
        /// <summary>
        /// Gets or Sets Cards
        /// </summary>
        [DataMember(Name="cards", EmitDefaultValue=false)]
        public List<Card> Cards { get; set; }

        /// <summary>
        /// Gets or Sets ScoreHighLow
        /// </summary>
        [DataMember(Name="scoreHighLow", EmitDefaultValue=false)]
        public Int32Int32ValueTuple ScoreHighLow { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public int? Score { get; set; }

        /// <summary>
        /// Gets or Sets IsBlackjack
        /// </summary>
        [DataMember(Name="isBlackjack", EmitDefaultValue=false)]
        public bool? IsBlackjack { get; set; }

        /// <summary>
        /// Gets or Sets IsBusted
        /// </summary>
        [DataMember(Name="isBusted", EmitDefaultValue=false)]
        public bool? IsBusted { get; set; }

        /// <summary>
        /// Gets or Sets IsSoft
        /// </summary>
        [DataMember(Name="isSoft", EmitDefaultValue=false)]
        public bool? IsSoft { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlackjackHand {\n");
            sb.Append("  Cards: ").Append(Cards).Append("\n");
            sb.Append("  ScoreHighLow: ").Append(ScoreHighLow).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  IsBlackjack: ").Append(IsBlackjack).Append("\n");
            sb.Append("  IsBusted: ").Append(IsBusted).Append("\n");
            sb.Append("  IsSoft: ").Append(IsSoft).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlackjackHand);
        }

        /// <summary>
        /// Returns true if BlackjackHand instances are equal
        /// </summary>
        /// <param name="input">Instance of BlackjackHand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlackjackHand input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cards == input.Cards ||
                    this.Cards != null &&
                    input.Cards != null &&
                    this.Cards.SequenceEqual(input.Cards)
                ) && 
                (
                    this.ScoreHighLow == input.ScoreHighLow ||
                    (this.ScoreHighLow != null &&
                    this.ScoreHighLow.Equals(input.ScoreHighLow))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.IsBlackjack == input.IsBlackjack ||
                    (this.IsBlackjack != null &&
                    this.IsBlackjack.Equals(input.IsBlackjack))
                ) && 
                (
                    this.IsBusted == input.IsBusted ||
                    (this.IsBusted != null &&
                    this.IsBusted.Equals(input.IsBusted))
                ) && 
                (
                    this.IsSoft == input.IsSoft ||
                    (this.IsSoft != null &&
                    this.IsSoft.Equals(input.IsSoft))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cards != null)
                    hashCode = hashCode * 59 + this.Cards.GetHashCode();
                if (this.ScoreHighLow != null)
                    hashCode = hashCode * 59 + this.ScoreHighLow.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.IsBlackjack != null)
                    hashCode = hashCode * 59 + this.IsBlackjack.GetHashCode();
                if (this.IsBusted != null)
                    hashCode = hashCode * 59 + this.IsBusted.GetHashCode();
                if (this.IsSoft != null)
                    hashCode = hashCode * 59 + this.IsSoft.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
