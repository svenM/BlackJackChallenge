/* 
 * BJ API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BlackjackHandSettlement
    /// </summary>
    [DataContract]
        public partial class BlackjackHandSettlement :  IEquatable<BlackjackHandSettlement>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets WagerOutcome
        /// </summary>
        [DataMember(Name="wagerOutcome", EmitDefaultValue=false)]
        public WagerOutcome? WagerOutcome { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlackjackHandSettlement" /> class.
        /// </summary>
        /// <param name="playerHand">playerHand.</param>
        /// <param name="dealerHand">dealerHand.</param>
        /// <param name="wagerOutcome">wagerOutcome.</param>
        public BlackjackHandSettlement(BlackjackHand playerHand = default(BlackjackHand), BlackjackHand dealerHand = default(BlackjackHand), WagerOutcome? wagerOutcome = default(WagerOutcome?))
        {
            this.PlayerHand = playerHand;
            this.DealerHand = dealerHand;
            this.WagerOutcome = wagerOutcome;
        }
        
        /// <summary>
        /// Gets or Sets PlayerPosition
        /// </summary>
        [DataMember(Name="playerPosition", EmitDefaultValue=false)]
        public int? PlayerPosition { get; private set; }

        /// <summary>
        /// Gets or Sets PlayerHand
        /// </summary>
        [DataMember(Name="playerHand", EmitDefaultValue=false)]
        public BlackjackHand PlayerHand { get; set; }

        /// <summary>
        /// Gets or Sets DealerHand
        /// </summary>
        [DataMember(Name="dealerHand", EmitDefaultValue=false)]
        public BlackjackHand DealerHand { get; set; }


        /// <summary>
        /// Gets or Sets WagerAmount
        /// </summary>
        [DataMember(Name="wagerAmount", EmitDefaultValue=false)]
        public double? WagerAmount { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlackjackHandSettlement {\n");
            sb.Append("  PlayerPosition: ").Append(PlayerPosition).Append("\n");
            sb.Append("  PlayerHand: ").Append(PlayerHand).Append("\n");
            sb.Append("  DealerHand: ").Append(DealerHand).Append("\n");
            sb.Append("  WagerOutcome: ").Append(WagerOutcome).Append("\n");
            sb.Append("  WagerAmount: ").Append(WagerAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlackjackHandSettlement);
        }

        /// <summary>
        /// Returns true if BlackjackHandSettlement instances are equal
        /// </summary>
        /// <param name="input">Instance of BlackjackHandSettlement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlackjackHandSettlement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PlayerPosition == input.PlayerPosition ||
                    (this.PlayerPosition != null &&
                    this.PlayerPosition.Equals(input.PlayerPosition))
                ) && 
                (
                    this.PlayerHand == input.PlayerHand ||
                    (this.PlayerHand != null &&
                    this.PlayerHand.Equals(input.PlayerHand))
                ) && 
                (
                    this.DealerHand == input.DealerHand ||
                    (this.DealerHand != null &&
                    this.DealerHand.Equals(input.DealerHand))
                ) && 
                (
                    this.WagerOutcome == input.WagerOutcome ||
                    (this.WagerOutcome != null &&
                    this.WagerOutcome.Equals(input.WagerOutcome))
                ) && 
                (
                    this.WagerAmount == input.WagerAmount ||
                    (this.WagerAmount != null &&
                    this.WagerAmount.Equals(input.WagerAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PlayerPosition != null)
                    hashCode = hashCode * 59 + this.PlayerPosition.GetHashCode();
                if (this.PlayerHand != null)
                    hashCode = hashCode * 59 + this.PlayerHand.GetHashCode();
                if (this.DealerHand != null)
                    hashCode = hashCode * 59 + this.DealerHand.GetHashCode();
                if (this.WagerOutcome != null)
                    hashCode = hashCode * 59 + this.WagerOutcome.GetHashCode();
                if (this.WagerAmount != null)
                    hashCode = hashCode * 59 + this.WagerAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
