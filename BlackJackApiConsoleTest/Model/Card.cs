/* 
 * BJ API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Card
    /// </summary>
    [DataContract]
        public partial class Card :  IEquatable<Card>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name="rank", EmitDefaultValue=false)]
        public CardRank? Rank { get; set; }
        /// <summary>
        /// Gets or Sets Suit
        /// </summary>
        [DataMember(Name="suit", EmitDefaultValue=false)]
        public CardSuit? Suit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Card" /> class.
        /// </summary>
        /// <param name="rank">rank.</param>
        /// <param name="suit">suit.</param>
        public Card(CardRank? rank = default(CardRank?), CardSuit? suit = default(CardSuit?))
        {
            this.Rank = rank;
            this.Suit = suit;
        }
        


        /// <summary>
        /// Gets or Sets NumericValue
        /// </summary>
        [DataMember(Name="numericValue", EmitDefaultValue=false)]
        public int? NumericValue { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Card {\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Suit: ").Append(Suit).Append("\n");
            sb.Append("  NumericValue: ").Append(NumericValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Card);
        }

        /// <summary>
        /// Returns true if Card instances are equal
        /// </summary>
        /// <param name="input">Instance of Card to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Card input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                ) && 
                (
                    this.Suit == input.Suit ||
                    (this.Suit != null &&
                    this.Suit.Equals(input.Suit))
                ) && 
                (
                    this.NumericValue == input.NumericValue ||
                    (this.NumericValue != null &&
                    this.NumericValue.Equals(input.NumericValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Rank != null)
                    hashCode = hashCode * 59 + this.Rank.GetHashCode();
                if (this.Suit != null)
                    hashCode = hashCode * 59 + this.Suit.GetHashCode();
                if (this.NumericValue != null)
                    hashCode = hashCode * 59 + this.NumericValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
