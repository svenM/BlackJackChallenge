/* 
 * BJ API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BlackjackGamePlayer
    /// </summary>
    [DataContract]
        public partial class BlackjackGamePlayer :  IEquatable<BlackjackGamePlayer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlackjackGamePlayer" /> class.
        /// </summary>
        /// <param name="account">account.</param>
        /// <param name="hand">hand.</param>
        public BlackjackGamePlayer(IPlayerAccount account = default(IPlayerAccount), BlackjackHand hand = default(BlackjackHand))
        {
            this.Account = account;
            this.Hand = hand;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; private set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public IPlayerAccount Account { get; set; }

        /// <summary>
        /// Gets or Sets Alias
        /// </summary>
        [DataMember(Name="alias", EmitDefaultValue=false)]
        public string Alias { get; private set; }

        /// <summary>
        /// Gets or Sets IsLive
        /// </summary>
        [DataMember(Name="isLive", EmitDefaultValue=false)]
        public bool? IsLive { get; private set; }

        /// <summary>
        /// Gets or Sets HasAction
        /// </summary>
        [DataMember(Name="hasAction", EmitDefaultValue=false)]
        public bool? HasAction { get; private set; }

        /// <summary>
        /// Gets or Sets Wager
        /// </summary>
        [DataMember(Name="wager", EmitDefaultValue=false)]
        public double? Wager { get; private set; }

        /// <summary>
        /// Gets or Sets Hand
        /// </summary>
        [DataMember(Name="hand", EmitDefaultValue=false)]
        public BlackjackHand Hand { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlackjackGamePlayer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  IsLive: ").Append(IsLive).Append("\n");
            sb.Append("  HasAction: ").Append(HasAction).Append("\n");
            sb.Append("  Wager: ").Append(Wager).Append("\n");
            sb.Append("  Hand: ").Append(Hand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlackjackGamePlayer);
        }

        /// <summary>
        /// Returns true if BlackjackGamePlayer instances are equal
        /// </summary>
        /// <param name="input">Instance of BlackjackGamePlayer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlackjackGamePlayer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && 
                (
                    this.IsLive == input.IsLive ||
                    (this.IsLive != null &&
                    this.IsLive.Equals(input.IsLive))
                ) && 
                (
                    this.HasAction == input.HasAction ||
                    (this.HasAction != null &&
                    this.HasAction.Equals(input.HasAction))
                ) && 
                (
                    this.Wager == input.Wager ||
                    (this.Wager != null &&
                    this.Wager.Equals(input.Wager))
                ) && 
                (
                    this.Hand == input.Hand ||
                    (this.Hand != null &&
                    this.Hand.Equals(input.Hand))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Alias != null)
                    hashCode = hashCode * 59 + this.Alias.GetHashCode();
                if (this.IsLive != null)
                    hashCode = hashCode * 59 + this.IsLive.GetHashCode();
                if (this.HasAction != null)
                    hashCode = hashCode * 59 + this.HasAction.GetHashCode();
                if (this.Wager != null)
                    hashCode = hashCode * 59 + this.Wager.GetHashCode();
                if (this.Hand != null)
                    hashCode = hashCode * 59 + this.Hand.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
